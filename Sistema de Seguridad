import React, { useState, useRef } from 'react';
import { Shield, Lock, Unlock, Key, FileText, Database, Upload, Download, CheckCircle, AlertTriangle, Eye, EyeOff, Settings, Folder, Clock, Hash } from 'lucide-react';

const SecuritySystem = () => {
  const [currentView, setCurrentView] = useState('dashboard');
  const [password, setPassword] = useState('MiClaveSegura2025!');
  const [showPassword, setShowPassword] = useState(false);
  const [files, setFiles] = useState([
    { name: 'documento_test.txt', size: '2.5 KB', status: 'encrypted', hash: 'a7b8c9...', encrypted: true },
    { name: 'datos_test.json', size: '1.2 KB', status: 'encrypted', hash: 'd4e5f6...', encrypted: true }
  ]);
  const [backups, setBackups] = useState([
    { name: 'backup_empresa_2025', date: '2025-08-26 14:30:00', files: 4, size: '15.8 KB', status: 'completed' },
    { name: 'backup_sistema_2025', date: '2025-08-25 09:15:00', files: 8, size: '32.1 KB', status: 'completed' }
  ]);
  const [logs, setLogs] = useState([
    { time: '14:35:22', action: 'Archivo cifrado', details: 'documento_test.txt → AES-256', status: 'success' },
    { time: '14:34:18', action: 'Backup creado', details: 'backup_empresa_2025', status: 'success' },
    { time: '14:33:45', action: 'Hash verificado', details: 'datos_test.json → SHA-256', status: 'success' },
    { time: '14:32:10', action: 'Sistema iniciado', details: 'SecurityManager v1.0', status: 'info' }
  ]);

  const fileInputRef = useRef(null);

  const addLog = (action, details, status = 'success') => {
    const newLog = {
      time: new Date().toLocaleTimeString(),
      action,
      details,
      status
    };
    setLogs(prev => [newLog, ...prev.slice(0, 9)]);
  };

  const handleEncryptFile = (fileName) => {
    setFiles(prev => prev.map(file => 
      file.name === fileName 
        ? { ...file, encrypted: true, status: 'encrypted' }
        : file
    ));
    addLog('Archivo cifrado', `${fileName} → AES-256-CBC`);
  };

  const handleDecryptFile = (fileName) => {
    setFiles(prev => prev.map(file => 
      file.name === fileName 
        ? { ...file, encrypted: false, status: 'decrypted' }
        : file
    ));
    addLog('Archivo descifrado', `${fileName} → Restaurado`);
  };

  const handleCreateBackup = () => {
    const backupName = `backup_${Date.now()}`;
    const newBackup = {
      name: backupName,
      date: new Date().toLocaleString(),
      files: Math.floor(Math.random() * 10) + 1,
      size: `${(Math.random() * 50 + 10).toFixed(1)} KB`,
      status: 'completed'
    };
    setBackups(prev => [newBackup, ...prev]);
    addLog('Backup creado', backupName);
  };

  const handleRestoreBackup = (backupName) => {
    addLog('Backup restaurado', backupName);
  };

  const handleVerifyIntegrity = (fileName) => {
    const file = files.find(f => f.name === fileName);
    if (file) {
      addLog('Integridad verificada', `${fileName} → SHA-256: ${file.hash}`);
    }
  };

  const handleFileUpload = (event) => {
    const uploadedFiles = Array.from(event.target.files);
    uploadedFiles.forEach(file => {
      const newFile = {
        name: file.name,
        size: `${(file.size / 1024).toFixed(1)} KB`,
        status: 'ready',
        hash: `${Math.random().toString(16).substr(2, 6)}...`,
        encrypted: false
      };
      setFiles(prev => [...prev, newFile]);
      addLog('Archivo cargado', file.name, 'info');
    });
  };

  const renderDashboard = () => (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-gradient-to-br from-blue-500 to-blue-600 p-6 rounded-xl text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-blue-100">Archivos Cifrados</p>
              <p className="text-3xl font-bold">{files.filter(f => f.encrypted).length}</p>
            </div>
            <Shield className="h-10 w-10 text-blue-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-br from-green-500 to-green-600 p-6 rounded-xl text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-green-100">Backups Activos</p>
              <p className="text-3xl font-bold">{backups.length}</p>
            </div>
            <Database className="h-10 w-10 text-green-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-br from-purple-500 to-purple-600 p-6 rounded-xl text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-purple-100">Total Archivos</p>
              <p className="text-3xl font-bold">{files.length}</p>
            </div>
            <FileText className="h-10 w-10 text-purple-200" />
          </div>
        </div>
        
        <div className="bg-gradient-to-br from-orange-500 to-orange-600 p-6 rounded-xl text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-orange-100">Nivel Seguridad</p>
              <p className="text-2xl font-bold">AES-256</p>
            </div>
            <Key className="h-10 w-10 text-orange-200" />
          </div>
        </div>
      </div>

      {/* System Status */}
      <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-100">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Settings className="h-5 w-5 mr-2 text-gray-600" />
          Estado del Sistema
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="flex items-center space-x-3">
            <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
            <span className="text-sm text-gray-600">Cifrado AES-256-CBC Activo</span>
          </div>
          <div className="flex items-center space-x-3">
            <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
            <span className="text-sm text-gray-600">Hash SHA-256 Operativo</span>
          </div>
          <div className="flex items-center space-x-3">
            <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
            <span className="text-sm text-gray-600">Sistema de Backup Listo</span>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-100">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Clock className="h-5 w-5 mr-2 text-gray-600" />
          Actividad Reciente
        </h3>
        <div className="space-y-3 max-h-64 overflow-y-auto">
          {logs.slice(0, 5).map((log, index) => (
            <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
              <div className="flex items-center space-x-3">
                <div className={`w-2 h-2 rounded-full ${
                  log.status === 'success' ? 'bg-green-500' :
                  log.status === 'error' ? 'bg-red-500' : 'bg-blue-500'
                }`}></div>
                <div>
                  <p className="font-medium text-sm">{log.action}</p>
                  <p className="text-xs text-gray-500">{log.details}</p>
                </div>
              </div>
              <span className="text-xs text-gray-400">{log.time}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderFiles = () => (
    <div className="space-y-6">
      {/* File Upload */}
      <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-100">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Upload className="h-5 w-5 mr-2 text-gray-600" />
          Cargar Archivos
        </h3>
        <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors">
          <Upload className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-600 mb-4">Arrastra archivos aquí o haz clic para seleccionar</p>
          <input
            ref={fileInputRef}
            type="file"
            multiple
            onChange={handleFileUpload}
            className="hidden"
          />
          <button
            onClick={() => fileInputRef.current?.click()}
            className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors"
          >
            Seleccionar Archivos
          </button>
        </div>
      </div>

      {/* Files List */}
      <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-100">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <FileText className="h-5 w-5 mr-2 text-gray-600" />
          Gestión de Archivos
        </h3>
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-gray-200">
                <th className="text-left py-3 px-4 font-medium text-gray-700">Archivo</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Tamaño</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Estado</th>
                <th className="text-left py-3 px-4 font-medium text-gray-700">Hash</th>
                <th className="text-center py-3 px-4 font-medium text-gray-700">Acciones</th>
              </tr>
            </thead>
            <tbody>
              {files.map((file, index) => (
                <tr key={index} className="border-b border-gray-100 hover:bg-gray-50">
                  <td className="py-3 px-4">
                    <div className="flex items-center space-x-2">
                      <FileText className="h-4 w-4 text-gray-500" />
                      <span className="font-medium">{file.name}</span>
                    </div>
                  </td>
                  <td className="py-3 px-4 text-gray-600">{file.size}</td>
                  <td className="py-3 px-4">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                      file.encrypted 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-yellow-100 text-yellow-800'
                    }`}>
                      {file.encrypted ? 'Cifrado' : 'Sin cifrar'}
                    </span>
                  </td>
                  <td className="py-3 px-4 font-mono text-sm text-gray-500">{file.hash}</td>
                  <td className="py-3 px-4">
                    <div className="flex space-x-2 justify-center">
                      {file.encrypted ? (
                        <button
                          onClick={() => handleDecryptFile(file.name)}
                          className="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                          title="Descifrar"
                        >
                          <Unlock className="h-4 w-4" />
                        </button>
                      ) : (
                        <button
                          onClick={() => handleEncryptFile(file.name)}
                          className="p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors"
                          title="Cifrar"
                        >
                          <Lock className="h-4 w-4" />
                        </button>
                      )}
                      <button
                        onClick={() => handleVerifyIntegrity(file.name)}
                        className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                        title="Verificar integridad"
                      >
                        <Hash className="h-4 w-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderBackups = () => (
    <div className="space-y-6">
      {/* Create Backup */}
      <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-100">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Database className="h-5 w-5 mr-2 text-gray-600" />
          Crear Copia de Seguridad
        </h3>
        <div className="flex space-x-4">
          <button
            onClick={handleCreateBackup}
            className="bg-green-500 text-white px-6 py-3 rounded-lg hover:bg-green-600 transition-colors flex items-center space-x-2"
          >
            <Database className="h-4 w-4" />
            <span>Crear Backup Ahora</span>
          </button>
          <button className="bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600 transition-colors flex items-center space-x-2">
            <Settings className="h-4 w-4" />
            <span>Configurar Automático</span>
          </button>
        </div>
      </div>

      {/* Backups List */}
      <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-100">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Folder className="h-5 w-5 mr-2 text-gray-600" />
          Copias de Seguridad Disponibles
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {backups.map((backup, index) => (
            <div key={index} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors">
              <div className="flex justify-between items-start mb-3">
                <h4 className="font-semibold text-gray-800">{backup.name}</h4>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                  backup.status === 'completed' 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-yellow-100 text-yellow-800'
                }`}>
                  {backup.status === 'completed' ? 'Completado' : 'En proceso'}
                </span>
              </div>
              <div className="space-y-2 text-sm text-gray-600">
                <div className="flex justify-between">
                  <span>Fecha:</span>
                  <span>{backup.date}</span>
                </div>
                <div className="flex justify-between">
                  <span>Archivos:</span>
                  <span>{backup.files}</span>
                </div>
                <div className="flex justify-between">
                  <span>Tamaño:</span>
                  <span>{backup.size}</span>
                </div>
              </div>
              <div className="flex space-x-2 mt-4">
                <button
                  onClick={() => handleRestoreBackup(backup.name)}
                  className="flex-1 bg-blue-500 text-white py-2 px-3 rounded text-sm hover:bg-blue-600 transition-colors flex items-center justify-center space-x-1"
                >
                  <Download className="h-4 w-4" />
                  <span>Restaurar</span>
                </button>
                <button className="px-3 py-2 border border-gray-300 rounded text-sm hover:bg-gray-50 transition-colors">
                  <Eye className="h-4 w-4" />
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderSettings = () => (
    <div className="space-y-6">
      {/* Security Settings */}
      <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-100">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Key className="h-5 w-5 mr-2 text-gray-600" />
          Configuración de Seguridad
        </h3>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Contraseña Maestra
            </label>
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <button
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-3 text-gray-500 hover:text-gray-700"
              >
                {showPassword ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />}
              </button>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Algoritmo de Cifrado
              </label>
              <select className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                <option>AES-256-CBC</option>
                <option>AES-256-GCM</option>
                <option>AES-128-CBC</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Función Hash
              </label>
              <select className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                <option>SHA-256</option>
                <option>SHA-512</option>
                <option>SHA-3</option>
              </select>
            </div>
          </div>
        </div>
      </div>

      {/* System Information */}
      <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-100">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Settings className="h-5 w-5 mr-2 text-gray-600" />
          Información del Sistema
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-gray-600">Versión:</span>
              <span className="font-medium">SecurityManager v1.0</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Biblioteca:</span>
              <span className="font-medium">Cryptography 41.0.7</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Backend:</span>
              <span className="font-medium">OpenSSL</span>
            </div>
          </div>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-gray-600">KDF:</span>
              <span className="font-medium">PBKDF2-SHA256</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Iteraciones:</span>
              <span className="font-medium">100,000</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">Tamaño de Clave:</span>
              <span className="font-medium">256 bits</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      {/* Header */}
      <div className="bg-white shadow-lg border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-3">
              <div className="bg-blue-600 p-2 rounded-lg">
                <Shield className="h-8 w-8 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Sistema de Seguridad</h1>
                <p className="text-gray-600">Cifrado AES-256 & Verificación SHA-256</p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
              <span className="text-sm text-gray-600">Sistema Activo</span>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex flex-col lg:flex-row gap-8">
          {/* Sidebar */}
          <div className="lg:w-64 flex-shrink-0">
            <nav className="bg-white rounded-xl shadow-lg p-4 border border-gray-100">
              <div className="space-y-2">
                {[
                  { id: 'dashboard', icon: Shield, label: 'Panel Principal' },
                  { id: 'files', icon: FileText, label: 'Gestión de Archivos' },
                  { id: 'backups', icon: Database, label: 'Copias de Seguridad' },
                  { id: 'settings', icon: Settings, label: 'Configuración' }
                ].map(({ id, icon: Icon, label }) => (
                  <button
                    key={id}
                    onClick={() => setCurrentView(id)}
                    className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                      currentView === id
                        ? 'bg-blue-50 text-blue-700 border border-blue-200'
                        : 'text-gray-600 hover:bg-gray-50'
                    }`}
                  >
                    <Icon className="h-5 w-5" />
                    <span className="font-medium">{label}</span>
                  </button>
                ))}
              </div>
            </nav>

            {/* Quick Stats */}
            <div className="mt-6 bg-white rounded-xl shadow-lg p-4 border border-gray-100">
              <h3 className="font-semibold text-gray-800 mb-3">Estado Rápido</h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Cifrado:</span>
                  <div className="flex items-center space-x-1">
                    <CheckCircle className="h-4 w-4 text-green-500" />
                    <span className="text-sm font-medium">Activo</span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Integridad:</span>
                  <div className="flex items-center space-x-1">
                    <CheckCircle className="h-4 w-4 text-green-500" />
                    <span className="text-sm font-medium">OK</span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-600">Backups:</span>
                  <div className="flex items-center space-x-1">
                    <CheckCircle className="h-4 w-4 text-green-500" />
                    <span className="text-sm font-medium">{backups.length}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="flex-1">
            {currentView === 'dashboard' && renderDashboard()}
            {currentView === 'files' && renderFiles()}
            {currentView === 'backups' && renderBackups()}
            {currentView === 'settings' && renderSettings()}
          </div>
        </div>
      </div>
    </div>
  );
};

export default SecuritySystem;